Traceback (most recent call last):
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/nbclient/client.py", line 1001, in async_execute_cell
    exec_reply = await self.task_poll_for_reply
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/nbclient/client.py", line 802, in _async_poll_for_reply
    error_on_timeout_execute_reply = await self._async_handle_timeout(timeout, cell)
  File "/home/esrf/ljegou/.local/lib/python3.8/site-packages/nbclient/client.py", line 852, in _async_handle_timeout
    raise CellTimeoutError.error_from_timeout_and_cell(
nbclient.exceptions.CellTimeoutError: A cell timed out while it was being executed, after 30 seconds.
The message was: Cell execution timed out.
Here is a preview of the cell contents:
-------------------
['cosine_tol = np.cos(np.radians(90 - ds.ostep))', 'grains, indexer = utils.do_index(cf=cf_strong,', '                                 unitcell=minor_phase_unitcell,', '                                dstol=minor_phase_cf_dstol,', '                                forgen=rings_for_gen,']
...
['                                max_grains=max_grains', ')', 'for ginc, g in enumerate(grains):', '    g.gid = ginc', "print(f'Found {len(grains)} grains!')"]
-------------------

